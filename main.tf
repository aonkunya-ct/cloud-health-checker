# ------------------------------------------------------------------
# 1. ‡∏ö‡∏≠‡∏Å Terraform ‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ "‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏≠‡∏¥‡∏ô" ‡∏≠‡∏∞‡πÑ‡∏£
# ------------------------------------------------------------------
terraform {
  required_providers {
    # ‡πÄ‡∏£‡∏≤‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ "‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ AWS"
    aws = {
      source  = "hashicorp/aws" # ‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏≠‡∏¥‡∏ô AWS ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£
      version = "~> 5.0"        # ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô (‡πÄ‡∏≠‡∏≤‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 5 ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ)
    }
  }
}

# ------------------------------------------------------------------
# 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ "‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏≠‡∏¥‡∏ô" AWS
# ------------------------------------------------------------------
provider "aws" {
  # ‡∏ö‡∏≠‡∏Å‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏≠‡∏¥‡∏ô‡∏ß‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà Region ‡πÑ‡∏´‡∏ô
  # (‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ Region ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÅ‡∏Å‡πâ Error 301 ‡∏Å‡∏±‡∏ô‡πÑ‡∏õ‡∏Ñ‡∏£‡∏±‡∏ö!)
  region = "ap-southeast-1"
}

# ------------------------------------------------------------------
# 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á "‡∏ö‡∏±‡∏ï‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï" (IAM Role) ‡πÉ‡∏´‡πâ Lambda
# ------------------------------------------------------------------
resource "aws_iam_role" "lambda_exec_role" {
  name = "cloud-health-checker-role" # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ Role

  # ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏à": 
  # "‡∏â‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏à‡πÉ‡∏´‡πâ '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ Lambda' (lambda.amazonaws.com) ‡∏™‡∏ß‡∏°‡∏£‡∏≠‡∏¢ (Assume) Role ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ"
  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Effect = "Allow",
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

# ------------------------------------------------------------------
# 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á "Policy" (‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå) ‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ Role ‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á
# ------------------------------------------------------------------
resource "aws_iam_policy" "lambda_s3_policy" {
  name        = "cloud-health-checker-s3-policy"
  description = "Allow Lambda to read the urls.txt file from S3"

  # ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ "‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå": 
  # "‡∏â‡∏±‡∏ô‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï (Allow) ‡πÉ‡∏´‡πâ '‡∏≠‡πà‡∏≤‡∏ô' (GetObject) ‡∏à‡∏≤‡∏Å S3 bucket 'cloud-health-checker' ‡πÑ‡∏î‡πâ"
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action   = "s3:GetObject",
        Effect   = "Allow",
        Resource = "arn:aws:s3:::cloud-health-checker/urls.txt" # <-- ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤!
      }
    ]
  })
}

# ------------------------------------------------------------------
# 5. "‡∏ï‡∏¥‡∏î" Policy (‡∏Ç‡πâ‡∏≠ 4) ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö Role (‡∏Ç‡πâ‡∏≠ 3)
# ------------------------------------------------------------------
resource "aws_iam_role_policy_attachment" "s3_attach" {
  role       = aws_iam_role.lambda_exec_role.name
  policy_arn = aws_iam_policy.lambda_s3_policy.arn
}

# ------------------------------------------------------------------
# 6. ‡∏™‡∏£‡πâ‡∏≤‡∏á "Lambda Function" (‡∏ï‡∏±‡∏ß‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ‚öôÔ∏è)
# ------------------------------------------------------------------
resource "aws_lambda_function" "health_checker_func" {
  function_name = "cloud-health-checker-function" # 1. ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ Function

  # 2. ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå Zip ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ (‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô Step 3.3)
  #    (‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô Zip ‡∏ô‡∏µ‡πâ üì¶ ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡πÅ‡∏Ñ‡πà‡πÑ‡∏ü‡∏•‡πå bootstrap ‚öôÔ∏è)
  filename = "lambda_function.zip"

  # 3. ‡∏ö‡∏≠‡∏Å Lambda ‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ "Custom Runtime" (‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏°‡∏≤‡πÄ‡∏≠‡∏á)
  #    - Runtime ‡∏Ñ‡∏∑‡∏≠ "provided.al2" (‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏° Amazon Linux 2)
  #    - Handler ‡∏Ñ‡∏∑‡∏≠ "bootstrap" (‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå ‚öôÔ∏è ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Ñ‡∏≠‡∏°‡πÑ‡∏û‡∏•‡πå‡πÑ‡∏ß‡πâ ‡∏ã‡∏∂‡πà‡∏á Lambda ‡∏à‡∏∞‡∏£‡∏±‡∏ô)
  runtime = "provided.al2"
  handler = "bootstrap"

  # 4. ‡πÉ‡∏ä‡πâ "‡∏ö‡∏±‡∏ï‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï" (Role) ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠ 3
  role = aws_iam_role.lambda_exec_role.arn

  # 5. (Best Practice) ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå Zip
  source_code_hash = filebase64sha256("lambda_function.zip")
}

# ------------------------------------------------------------------
# 7. ‡∏™‡∏£‡πâ‡∏≤‡∏á "‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡∏õ‡∏•‡∏∏‡∏Å" ‚è∞ (EventBridge Rule)
# ------------------------------------------------------------------
resource "aws_cloudwatch_event_rule" "every_5_minutes" {
  name                = "every-5-minutes"
  description         = "Triggers the health checker every 5 minutes"
  
  # "‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏•‡∏∏‡∏Å" ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà! (‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö cron job)
  schedule_expression = "rate(5 minutes)" 
}

# ------------------------------------------------------------------
# 8. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢" (Target) ‡∏Ç‡∏≠‡∏á‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡∏õ‡∏•‡∏∏‡∏Å
# ------------------------------------------------------------------
resource "aws_cloudwatch_event_target" "lambda_target" {
  rule = aws_cloudwatch_event_rule.every_5_minutes.name # 1. ‡πÉ‡∏ä‡πâ‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡∏õ‡∏•‡∏∏‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠ 7
  arn  = aws_lambda_function.health_checker_func.arn  # 2. ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏õ‡∏•‡∏∏‡∏Å Lambda (‡∏Ç‡πâ‡∏≠ 6)
}

# ------------------------------------------------------------------
# 9. ‡πÉ‡∏´‡πâ "‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå" ü™™ EventBridge ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏∏‡∏Å Lambda
# ------------------------------------------------------------------
resource "aws_lambda_permission" "allow_eventbridge" {
  statement_id  = "AllowExecutionFromEventBridge"
  action        = "lambda:InvokeFunction" # 1. ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ "‡∏õ‡∏•‡∏∏‡∏Å" (Invoke)
  function_name = aws_lambda_function.health_checker_func.function_name # 2. ‡∏õ‡∏•‡∏∏‡∏Å Lambda (‡∏Ç‡πâ‡∏≠ 6)
  principal     = "events.amazonaws.com" # 3. ‡πÇ‡∏î‡∏¢ "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ EventBridge"
  
  # 4. (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç) ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏∏‡∏Å‡∏à‡∏≤‡∏Å "‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡∏õ‡∏•‡∏∏‡∏Å" (‡∏Ç‡πâ‡∏≠ 7) ‡πÄ‡∏£‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  source_arn = aws_cloudwatch_event_rule.every_5_minutes.arn
}

# ------------------------------------------------------------------
# 10. (‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°!) "‡∏ï‡∏¥‡∏î" Policy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Logs ‚úçÔ∏è
# ------------------------------------------------------------------
resource "aws_iam_role_policy_attachment" "logs_attach" {
  role       = aws_iam_role.lambda_exec_role.name # 1. ‡∏ï‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Role ‡πÄ‡∏î‡∏¥‡∏° (‡∏Ç‡πâ‡∏≠ 3)
  
  # 2. ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ "‡∏ö‡∏±‡∏ï‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ‡∏Ç‡∏≠‡∏á AWS
  #    ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ Lambda ‡∏™‡∏£‡πâ‡∏≤‡∏á Log Group ‡πÅ‡∏•‡∏∞ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Log Events
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}